# -*- coding: utf-8 -*-
"""EvidenciaFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EhZwzSEK3s3vhxyZxhYKvfwhMkAI10pQ
"""

"""
Programa que reconoce la salud de plantas de tomate mediante la detecciÃ³n
de hojas verdes, amarillas y cafes y compara el porcentaje de cada una con
el total de pixeles que abarcan los rangos de colores dados
"""

import cv2
import matplotlib.pyplot as plt
import numpy as np

img = cv2.imread("./imagenes/jitomate1.jpg")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

img_gray_rgb = cv2.cvtColor(img_gray, cv2.COLOR_GRAY2RGB)


#Verde plantas saludables
lower_green = np.array([35, 10, 20])
upper_green = np.array([115, 255, 255])

#Amarillo, plantas espezando a morir
lower_yellow = np.array([20, 40, 80])
upper_yellow = np.array([35, 255, 255])

#Cafe, hojas muertas
lower_brown = np.array([10, 50, 20])
upper_brown = np.array([25, 255, 200])

#Tomates
lower_tomato = np.array([0, 0, 105])
upper_tomato = np.array([9, 255, 255])

lower_tomato2 = np.array([170, 0, 125])
upper_tomato2 = np.array([180, 255, 255])

lower_tomato3 = np.array([9, 0, 175])
upper_tomato3 = np.array([20, 255, 255])


#aplicacion de mascaras
maskVerde = cv2.inRange(img_hsv, lower_green, upper_green)
maskAmarilla = cv2.inRange(img_hsv, lower_yellow, upper_yellow)
maskCafe = cv2.inRange(img_hsv, lower_brown,  upper_brown)

maskTomate1 = cv2.inRange(img_hsv, lower_tomato, upper_tomato)
maskTomate2 = cv2.inRange(img_hsv, lower_tomato2, upper_tomato2)
maskTomate3 = cv2.inRange(img_hsv, lower_tomato3, upper_tomato3)


#Separado de cada color
colorVerde = cv2.bitwise_and(img_rgb, img_rgb, mask=maskVerde)
colorAmarilla = cv2.bitwise_and(img_rgb, img_rgb, mask=maskAmarilla)
colorCafe = cv2.bitwise_and(img_rgb, img_rgb, mask=maskCafe)

#Separando tomates
colorTomate = cv2.bitwise_and(img_rgb, img_rgb, mask=maskTomate1)
colorTomate2 = cv2.bitwise_and(img_rgb, img_rgb, mask=maskTomate2)
colorTomate3 = cv2.bitwise_and(img_rgb, img_rgb, mask=maskTomate3)


#Imagen con el Area analizada
result = cv2.addWeighted(img_gray_rgb, 1 , colorVerde, 1, 0)
result = cv2.addWeighted(result,1 , colorAmarilla, 1, 0)
result = cv2.addWeighted(result,1 , colorCafe, 1, 0)

resultTomate = cv2.addWeighted(img_gray_rgb, 1 , colorTomate, 1, 0)
resultTomate = cv2.addWeighted(resultTomate, 1 , colorTomate2, 1, 0)
resultTomate = cv2.addWeighted(resultTomate, 1 , colorTomate3, 1, 0)




#Suma de los pixeles en cada una de los rangos de las mascaras
areaVerde = np.sum(maskVerde > 0)
areaAmarilla = np.sum(maskAmarilla > 0)
areaCafe = np.sum(maskCafe > 0)
areaTomate1 = np.sum(maskTomate1 > 0)
areaTomate2 = np.sum(maskTomate2 > 0)
areaTomate3 = np.sum(maskTomate3 > 0)
areaTomateTotal = areaTomate1 + areaTomate2 + areaTomate3
areaTotal = areaVerde + areaAmarilla + areaCafe


#Calculo del porcentaje
porcentajeVerde = areaVerde / areaTotal * 100
porcentajeAmarillo = areaAmarilla / areaTotal * 100
porcentajeCafe = areaCafe / areaTotal * 100


#Evaluacion de la planta
estados = ["Saludable","Posible Estres",
                   "Seca","Severamente deshidratada"]

if porcentajeVerde > 70:
    estado = estados[0]
elif porcentajeVerde > 40:
    estado = estados[1]
elif porcentajeVerde > 15:
    estado = estados[2]
else:
    estado = estados[3]


#Impresion de resultados para la planta
print(f"Total de pixeles de plantas: --{areaTotal}-- Pixeles\n\n")
print(f"{porcentajeVerde:.2f}% de la planta es verde")
print(f"{porcentajeAmarillo:.2f}% de la planta es amarilla")
print(f"{porcentajeCafe:.2f}% de plantas esta seca\n")

print(f"El estado de la planta es: {estado}\n\n")

#Impresion de resultados para el tomate
areaTotal += areaTomateTotal
porcentajeTomate = areaTomateTotal / areaTotal * 100

print(f"{porcentajeTomate:.2f}% de la planta es fruto cosechable")

#Ploteo
plt.figure()

plt.subplot(2, 2, 1)
plt.imshow(img_rgb)
plt.axis("off")
plt.title("Planta de Jitomate")

plt.subplot(2, 2, 2)
plt.imshow(result)
plt.axis("off")
plt.title("Area evaluada")


plt.subplot(2,2,3)
plt.imshow(resultTomate)
plt.axis("off")
plt.title("Area Fruto Cosechable")
